= CanCanCan
{<img src="https://badge.fury.io/rb/cancancan.png" alt="Gem Version" />}[http://badge.fury.io/rb/cancancan]
{<img src="https://travis-ci.org/CanCanCommunity/cancancan.png?branch=master" alt="Build Status" />}[https://travis-ci.org/CanCanCommunity/cancancan]
{<img src="https://codeclimate.com/github/CanCanCommunity/cancancan.png" />}[https://codeclimate.com/github/CanCanCommunity/cancancan]
{<img src="http://inch-ci.org/github/CanCanCommunity/cancancan.png" alt="Inline docs" />}[http://inch-ci.org/github/CanCanCommunity/cancancan]

Wiki[https://github.com/CanCanCommunity/cancancan/wiki] | RDocs[http://rdoc.info/projects/CanCanCommunity/cancancan] | Screencast[http://railscasts.com/episodes/192-authorization-with-cancan]

CanCan is an authorization library for Ruby on Rails which restricts what resources a given user is allowed to access. All permissions are defined in a single location (the +Ability+ class) and not duplicated across controllers, views, and database queries.


== Mission

This repo is a continuation of the dead CanCan[https://github.com/ryanb/cancan] project. Our mission is to keep CanCan alive and moving forward, with maintenance fixes and new features. Pull Requests are welcome!

I am currently focusing on the 1.x branch for the immediate future, making sure it is up to date as well as ensuring compatibility with Rails 4+. I will take a look into the 2.x branch and try to see what improvements, reorganizations and redesigns Ryan was attempting and go forward from there.

Any help is greatly appreciated, feel free to submit pull-requests or open issues.


== Installation

In <b>Rails 3 and 4</b>, add this to your Gemfile and run the +bundle+ command.

  gem 'cancancan', '~> 1.9'

In <b>Rails 2</b>, add this to your environment.rb file.

  config.gem "cancancan"

Alternatively, you can install it as a plugin.

  rails plugin install git://github.com/CanCanCommunity/cancancan.git


== Getting Started

CanCanCan expects a +current_user+ method to exist in the controller. First, set up some authentication (such as Authlogic[https://github.com/binarylogic/authlogic] or Devise[https://github.com/plataformatec/devise]). See {Changing Defaults}[https://github.com/CanCanCommunity/cancancan/wiki/changing-defaults] if you need different behavior.


=== 1. Define Abilities

User permissions are defined in an +Ability+ class. CanCan 1.5 includes a Rails 3 and 4 generator for creating this class.

  rails g cancan:ability

In Rails 2.3, just add a new class in <tt>app/models/ability.rb</tt> with the following contents:

  class Ability
    include CanCan::Ability

    def initialize(user)
    end
  end

See {Defining Abilities}[https://github.com/CanCanCommunity/cancancan/wiki/defining-abilities] for details.


=== 2. Check Abilities & Authorization

The current user's permissions can then be checked using the <tt>can?</tt> and <tt>cannot?</tt> methods in the view and controller.

  <% if can? :update, @article %>
    <%= link_to "Edit", edit_article_path(@article) %>
  <% end %>

See {Checking Abilities}[https://github.com/CanCanCommunity/cancancan/wiki/checking-abilities] for more information

The <tt>authorize!</tt> method in the controller will raise an exception if the user is not able to perform the given action.

  def show
    @article = Article.find(params[:id])
    authorize! :read, @article
  end

Setting this for every action can be tedious, therefore the +load_and_authorize_resource+ method is provided to automatically authorize all actions in a RESTful style resource controller. It will use a before filter to load the resource into an instance variable and authorize it for every action.

  class ArticlesController < ApplicationController
    load_and_authorize_resource

    def show
      # @article is already loaded and authorized
    end
  end

See {Authorizing Controller Actions}[https://github.com/CanCanCommunity/cancancan/wiki/authorizing-controller-actions] for more information.


==== Strong Parameters

When using <tt>strong_parameters</tt> or Rails 4+, you have to sanitize inputs before saving the record, in actions such as <tt>:create</tt> and <tt>:update</tt>.

By default, CanCan will try to sanitize the input on <tt>:create</tt> and <tt>:update</tt> routes by seeing if your controller will respond to the following methods (in order):

* <tt>create_params</tt> or <tt>update_params</tt> (depending on the action you are performing)
* <tt><model_name>_params</tt> such as <tt>article_params</tt> (this is the default convention in rails for naming your param method)
* <tt>resource_params</tt> (a generically named method you could specify in each controller)

Additionally, <tt>load_and_authorize_resource</tt> can now take a <tt>param_method</tt> option to specify a custom method in the controller to run to sanitize input.

You can associate the <tt>param_method</tt> option with a symbol corresponding to the name of a method that will get called:

  class ArticlesController < ApplicationController
    load_and_authorize_resource param_method: :my_sanitizer

    def create
      if @article.save
        # hurray
      else
        render :new
      end
    end

    private

    def my_sanitizer
      params.require(:article).permit(:name)
    end
  end

You can also use a string that will be evaluated in the context of the controller using <tt>instance_eval</tt> and needs to contain valid Ruby code. This does come in handy when using a PermittedParams class as suggested in Railscast 371:

  load_and_authorize_resource param_method: 'permitted_params.article'

Finally, it's possible to associate <tt>param_method</tt> with a Proc object which will be called with the controller as the only argument:

  load_and_authorize_resource param_method: Proc.new { |c| c.params.require(:article).permit(:name) }

See {Strong Parameters}[https://github.com/CanCanCommunity/cancancan/wiki/Strong-Parameters] for more information.

=== 3. Handle Unauthorized Access

If the user authorization fails, a <tt>CanCan::AccessDenied</tt> exception will be raised. You can catch this and modify its behavior in the +ApplicationController+.

  class ApplicationController < ActionController::Base
    rescue_from CanCan::AccessDenied do |exception|
      redirect_to root_url, :alert => exception.message
    end
  end

See {Exception Handling}[https://github.com/CanCanCommunity/cancancan/wiki/exception-handling] for more information.


=== 4. Lock It Down

If you want to ensure authorization happens on every action in your application, add +check_authorization+ to your ApplicationController.

  class ApplicationController < ActionController::Base
    check_authorization
  end

This will raise an exception if authorization is not performed in an action. If you want to skip this add +skip_authorization_check+ to a controller subclass. See {Ensure Authorization}[https://github.com/CanCanCommunity/cancancan/wiki/Ensure-Authorization] for more information.


== Wiki Docs

* {Upgrading to 1.6}[https://github.com/CanCanCommunity/cancancan/wiki/Upgrading-to-1.6]
* {Defining Abilities}[https://github.com/CanCanCommunity/cancancan/wiki/Defining-Abilities]
* {Checking Abilities}[https://github.com/CanCanCommunity/cancancan/wiki/Checking-Abilities]
* {Authorizing Controller Actions}[https://github.com/CanCanCommunity/cancancan/wiki/Authorizing-Controller-Actions]
* {Exception Handling}[https://github.com/CanCanCommunity/cancancan/wiki/Exception-Handling]
* {Changing Defaults}[https://github.com/CanCanCommunity/cancancan/wiki/Changing-Defaults]
* {See more}[https://github.com/CanCanCommunity/cancancan/wiki]

== Questions or Problems?

If you have any issues with CanCan which you cannot find the solution to in the documentation[https://github.com/CanCanCommunity/cancancan/wiki] or our mailing list: http://groups.google.com/group/cancancan, please add an {issue on GitHub}[https://github.com/CanCanCommunity/cancancan/issues] or fork the project and send a pull request.


== Development

Cancancan uses {appraisals}[https://github.com/thoughtbot/appraisal] to test the code base against multiple versions of rails, as well as the different model adapters.

When first developing, you may need to run <tt>bundle install</tt> and then <tt>appraisal install</tt>, to install the different sets.

You can then run all appraisal files (like CI does), with <tt>appraisal rake</tt> or just run a specific set <tt>appraisal activerecord_3.0 rake</tt>.

See the {CONTRIBUTING}[https://github.com/CanCanCommunity/cancancan/blob/develop/CONTRIBUTING.md] and {spec/README}[https://github.com/CanCanCommunity/cancancan/blob/master/spec/README.rdoc] for more information.


== Special Thanks

CanCan was inspired by declarative_authorization[https://github.com/stffn/declarative_authorization/] and aegis[https://github.com/makandra/aegis]. Also many thanks to the CanCan contributors[https://github.com/CanCanCommunity/cancancan/contributors]. See the CHANGELOG[https://github.com/CanCanCommunity/cancancan/blob/master/CHANGELOG.rdoc] for the full list.
